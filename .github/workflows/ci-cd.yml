name: KrishiMitra CI/CD Pipeline

on:
  push:
    branches: [main, develop, release/*]
    tags: [v*]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: krishimitra

jobs:
  # Test and Quality Checks
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend, ml-services]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js (Frontend/Backend)
      if: matrix.service != 'ml-services'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: services/${{ matrix.service }}/package-lock.json

    - name: Setup Python (ML Services)
      if: matrix.service == 'ml-services'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: services/${{ matrix.service }}/requirements.txt

    - name: Install dependencies (Node.js)
      if: matrix.service != 'ml-services'
      working-directory: services/${{ matrix.service }}
      run: npm ci

    - name: Install dependencies (Python)
      if: matrix.service == 'ml-services'
      working-directory: services/${{ matrix.service }}
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run linting
      working-directory: services/${{ matrix.service }}
      run: |
        if [ "${{ matrix.service }}" = "ml-services" ]; then
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .
        else
          npm run lint
        fi

    - name: Run type checking
      working-directory: services/${{ matrix.service }}
      run: |
        if [ "${{ matrix.service }}" = "ml-services" ]; then
          mypy .
        else
          npm run type-check || true
        fi

    - name: Run tests
      working-directory: services/${{ matrix.service }}
      run: |
        if [ "${{ matrix.service }}" = "ml-services" ]; then
          pytest --cov=. --cov-report=xml --cov-report=html
        else
          npm run test:coverage
        fi

    - name: Run security audit
      working-directory: services/${{ matrix.service }}
      run: |
        if [ "${{ matrix.service }}" = "ml-services" ]; then
          safety check
          bandit -r . -f json -o bandit-report.json || true
        else
          npm audit --audit-level=high
        fi

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Build and Push Docker Images
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [frontend, backend, ml-services]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: services/${{ matrix.service }}
        file: services/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.krishimitra.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags in manifests
        cd infrastructure/kubernetes
        
        # Apply configurations
        kubectl apply -f namespace.yaml
        kubectl apply -f configmap.yaml -n krishimitra-staging
        kubectl apply -f secrets.yaml -n krishimitra-staging
        
        # Deploy services
        for service in frontend backend ml-services; do
          kubectl set image deployment/${service}-deployment \
            ${service}=${{ env.REGISTRY }}/${{ github.repository }}/${service}:develop \
            -n krishimitra-staging
          kubectl rollout status deployment/${service}-deployment -n krishimitra-staging
        done

    - name: Run integration tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Run integration tests against staging
        cd tests/integration
        npm ci
        npm run test:staging

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://krishimitra.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        
        # Update image tags in manifests
        cd infrastructure/kubernetes
        
        # Apply configurations
        kubectl apply -f namespace.yaml
        kubectl apply -f configmap.yaml -n krishimitra
        kubectl apply -f secrets.yaml -n krishimitra
        
        # Deploy services with rolling update
        for service in frontend backend ml-services; do
          kubectl set image deployment/${service}-deployment \
            ${service}=${{ env.REGISTRY }}/${{ github.repository }}/${service}:${VERSION} \
            -n krishimitra
          kubectl rollout status deployment/${service}-deployment -n krishimitra --timeout=600s
        done

    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Run smoke tests against production
        cd tests/smoke
        npm ci
        npm run test:production

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      working-directory: tests/performance
      run: npm ci

    - name: Run performance tests
      working-directory: tests/performance
      run: |
        npm run test:staging
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: tests/performance/results/

  # Database Migration
  migrate:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run database migrations
      run: |
        # Connect to production database and run migrations
        cd services/backend
        npx prisma migrate deploy
        
    - name: Verify migration
      run: |
        # Run migration verification tests
        cd tests/migration
        npm ci
        npm run verify:production
